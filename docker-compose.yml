version: '3'

services:

  jobmanager:
    container_name: jobmanager
    build:
      context: /var/wwww/dataserver/flink
      dockerfile: Dockerfile
    ports: 
      - "8081:8081"
      - "9249:9249"
    command: jobmanager
    volumes: 
      - ./code:/opt/flink/code
    environment:
      - | 
        FLINK_PROPERTIES=jobmanager.rpc.address: jobmanager
        parallelism.default: 2

  taskmanager:
    container_name: taskmanager
    build:
      context: /var/wwww/dataserver/flink
      dockerfile: Dockerfile
    command: taskmanager
    depends_on:
      - jobmanager
    scale: 1
    ports: 
      - "9250:9249"
    volumes:
      - ./code:/opt/flink/code
    environment:
      - | 
        FLINK_PROPERTIES=jobmanager.rpc.address: jobmanager
        taskmanager.numberOfTasksSlots: 2
        parallelism.default: 2


  zookeeper:
    image: bitnami/zookeeper:3.9.1
    container_name: zookeeper
    ports:
      - "2181:2181"
    environment:
      - ALLOW_ANONYMOUS_LOGIN=yes
    volumes:
      - zookeeper_data:/var/lib/zookeeper/data
      - zookeeper_datalog:/var/lib/zookeeper/datalog

  kafka:
   image: docker.io/bitnami/kafka:3.4.1
   container_name: kafka
   ports:
     - "9094:9094"
   environment:
     - KAFKA_CFG_ZOOKEEPER_CONNECT=zookeeper:2181
     - KAFKA_CFG_LISTENERS=PLAINTEXT://:9092,CONTROLLER://:9093,EXTERNAL://:9094
     - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT,EXTERNAL:PLAINTEXT
     - KAFKA_CFG_ADVERTISED_LISTENERS=PLAINTEXT://kafka:9092,EXTERNAL://localhost:9094
     - ALLOW_PLAINTEXT_LISTENER='yes'
    
   volumes:
     - kafka:/var/lib/kafka/data
   depends_on:
     - zookeeper 

  postgres:
    image: postgres:latest
    container_name: postgres
    env_file:
      - ../.env
    environment:
      - POSTGRES_PASSWORD=postgres
    ports:
      - "5432:5432"
    volumes:
      - ./postgres/init.sql:/docker-entrypoint-initdb.d/init.sql
      - postgres:/var/lib/postgres/data

  fake_data:
    container_name: fake_data
    build:
      context: ./fake_data/
    command: python /opt/fake_data/gen_fake_data.py
    volumes:
      - ./fake_data:/opt/fake_data
      - ./code:/opt/fake_data/code
    depends_on:
      - postgres
      - kafka

  

volumes:
  zookeeper_data:
  zookeeper_datalog:
  kafka:
  postgres: